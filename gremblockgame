<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>BlockWalk with Moving Gremlins</title>
<style>
  body { margin: 0; overflow: hidden; background: #222; }
  canvas { display: block; }
  #instructions {
    position: absolute; top: 10px; left: 10px;
    color: white; font-family: Arial, sans-serif;
    background: rgba(0,0,0,0.5); padding: 10px; border-radius: 5px;
    user-select: none;
  }
</style>
</head>
<body>
<div id="instructions">
  Use WASD or Arrow keys to move.<br />
  Press SPACE to spawn gremlins!
</div>
<script src="https://cdn.jsdelivr.net/npm/three@0.153.0/build/three.min.js"></script>

<script>
  // Scene setup
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0x222222);

  // Camera
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
  camera.position.set(0, 2, 5);
  camera.lookAt(0, 0, 0);

  // Renderer
  const renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // Floor
  const floorGeo = new THREE.PlaneGeometry(100, 100);
  const floorMat = new THREE.MeshPhongMaterial({color: 0x555555, side: THREE.DoubleSide});
  const floor = new THREE.Mesh(floorGeo, floorMat);
  floor.rotation.x = -Math.PI/2;
  floor.position.y = 0;
  scene.add(floor);

  // Lighting
  const ambientLight = new THREE.AmbientLight(0x404040); // soft light
  scene.add(ambientLight);
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(5, 10, 7);
  scene.add(directionalLight);

  // Player cube (green)
  const playerGeo = new THREE.BoxGeometry(1, 1, 1);
  const playerMat = new THREE.MeshStandardMaterial({color: 0x00ff00});
  const player = new THREE.Mesh(playerGeo, playerMat);
  player.position.y = 0.5;
  scene.add(player);

  // Gremlins array
  const gremlins = [];

  // Movement state
  const move = { forward:false, backward:false, left:false, right:false };

  // Speed
  const speed = 0.1;

  // Floor bounds for gremlins
  const floorSize = 50;

  // Handle keys
  window.addEventListener('keydown', (e) => {
    switch(e.code) {
      case 'KeyW':
      case 'ArrowUp':
        move.forward = true;
        break;
      case 'KeyS':
      case 'ArrowDown':
        move.backward = true;
        break;
      case 'KeyA':
      case 'ArrowLeft':
        move.left = true;
        break;
      case 'KeyD':
      case 'ArrowRight':
        move.right = true;
        break;
      case 'Space':
        spawnGremlin();
        break;
    }
  });

  window.addEventListener('keyup', (e) => {
    switch(e.code) {
      case 'KeyW':
      case 'ArrowUp':
        move.forward = false;
        break;
      case 'KeyS':
      case 'ArrowDown':
        move.backward = false;
        break;
      case 'KeyA':
      case 'ArrowLeft':
        move.left = false;
        break;
      case 'KeyD':
      case 'ArrowRight':
        move.right = false;
        break;
    }
  });

  // Spawn a gremlin (small red cube) near the player
  function spawnGremlin() {
    const gremlinGeo = new THREE.BoxGeometry(0.5, 0.5, 0.5);
    const gremlinMat = new THREE.MeshStandardMaterial({color: 0xff0000});
    const gremlin = new THREE.Mesh(gremlinGeo, gremlinMat);

    // Random position near player within radius 3
    const angle = Math.random() * Math.PI * 2;
    const radius = 1 + Math.random() * 2;
    gremlin.position.set(
      player.position.x + Math.cos(angle)*radius,
      0.25,
      player.position.z + Math.sin(angle)*radius
    );

    // Add movement data for random walking
    gremlin.userData = {
      direction: new THREE.Vector3(
        (Math.random() - 0.5) * 0.1,
        0,
        (Math.random() - 0.5) * 0.1
      ),
      changeDirectionTimer: 0
    };

    scene.add(gremlin);
    gremlins.push(gremlin);
  }

  // Update loop
  function animate() {
    requestAnimationFrame(animate);

    // Move player based on keys
    if (move.forward) player.position.z -= speed;
    if (move.backward) player.position.z += speed;
    if (move.left) player.position.x -= speed;
    if (move.right) player.position.x += speed;

    // Move gremlins randomly
    gremlins.forEach(g => {
      // Move gremlin by its direction
      g.position.add(g.userData.direction);

      // Keep gremlin on floor within bounds
      if (g.position.x > floorSize) {
        g.position.x = floorSize;
        g.userData.direction.x *= -1;
      }
      if (g.position.x < -floorSize) {
        g.position.x = -floorSize;
        g.userData.direction.x *= -1;
      }
      if (g.position.z > floorSize) {
        g.position.z = floorSize;
        g.userData.direction.z *= -1;
      }
      if (g.position.z < -floorSize) {
        g.position.z = -floorSize;
        g.userData.direction.z *= -1;
      }

      // Change direction every 2 seconds (assuming ~60fps)
      g.userData.changeDirectionTimer++;
      if (g.userData.changeDirectionTimer > 120) {
        g.userData.direction.set(
          (Math.random() - 0.5) * 0.1,
          0,
          (Math.random() - 0.5) * 0.1
        );
        g.userData.changeDirectionTimer = 0;
      }
    });

    // Camera follows player
    camera.position.x = player.position.x;
    camera.position.z = player.position.z + 5;
    camera.position.y = player.position.y + 3;
    camera.lookAt(player.position);

    renderer.render(scene, camera);
  }

  animate();

  // Resize handling
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
</script>
</body>
</html>
